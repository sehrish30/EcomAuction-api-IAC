service: notes-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  environment:
    APP_NAME: Auction Notes App
    APP_STAGE: ${opt:stage,self:provider.stage}
    SERVICE_NAME: Notes Service

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  authorizer:
    # authorizer are either in token mode which is default or default mode
    # token mode pass token in authorizer header
    handler: src/handlers/cognitoUserPoolAuthorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref CognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref CognitoUserPoolClient

  createNote:
    handler: src/handlers/createNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):PutItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
  updateNote:
    handler: src/handlers/updateNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):UpdateItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: put
          path: notes/{noteId}
          authorizer: authorizer

  deleteNote:
    handler: src/handlers/deleteNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):DeleteItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: delete
          path: notes/{noteId}
          authorizer: authorizer

  getAllNotes:
    handler: src/handlers/getAllNotes.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):ScanItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: get
          path: notes
          # this is cognito user pool that only checks
          # if user is in the user pool or not
          # if you want to check actual credentials
          # you have to use iam authorizer or lambda authorizer
          # so u can check if user belongs to "no access" user pool group
          # if so return unauthorized access
          authorizer:
            name: userpool_authorizer
            # without type it will treat this as regular lambda authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  oldNoteDeleter:
    handler: src/handlers/oldNoteDeleter.handler
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):DeleteItemNotesTableIAM}
      - ${file(./iam/NotesTableIAM.yml):ScanItemNotesTableIAM}
    events:
      # Invoke lambda function every 2 minutes
      - schedule: cron(0/2 * ? * MON-FRI *)

  reportingError:
    handler: src/handlers/reportingError.handler
    events:
      - http:
          method: post
          path: error-handling
  getReportingError:
    handler: src/handlers/getReportingError.handler
    events:
      - http:
          method: get
          path: error-handling

  # sns subscription lambda function
  dispatchErrorsSNSTopicSubscription:
    handler: src/handlers/dispatchErrorsSNSTopicSubscription.handler
    environment:
      SESarn:
        # "arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:custom.SESEmail}"
        !Join [
          ":",
          [
            "arn:aws:ses",
            "${self:provider.region}",
            "${aws:accountId}",
            !Join ["/", ["identity", "${self:custom.SESEmail.name}"]],
          ],
        ]
      SESEmail: ${self:custom.SESEmail.name}

    iamRoleStatements:
      - ${file(./iam/CloudWatchIAM.yml):CloudWatchIAM}
      - ${file(./iam/SendMailIAM.yml):SendMailIAM}
    events:
      - sns:
          arn: !Ref ReportingSNSTopic
          topicName: ${self:custom.ReportingSNSSopic.name}

resources:
  Resources:
    NotesTable: ${file(./resources/NotesTable.yml):NotesTable}
    CognitoUserPool: ${file(./resources/CognitoUserPool.yml):CognitoUserPool}
    CognitoUserPoolClient: ${file(./resources/CognitoUserPool.yml):CognitoUserPoolClient}
    CognitoUserPoolDomain: ${file(./resources/CognitoUserPool.yml):CognitoUserPoolDomain}
    CognitoFacebookUserPoolIdentityProvider: ${file(./resources/CognitoUserPool.yml):CognitoFacebookUserPoolIdentityProvider}
    CognitoGoogleUserPoolIdentityProvider: ${file(./resources/CognitoUserPool.yml):CognitoGoogleUserPoolIdentityProvider}
    ReportingSNSTopic: ${file(./resources/ReportingSNSTopic.yml):ReportingSNSTopic}
    # create this only after lambda function is created so comment it down
    CloudwatchMerticFilter: ${file(./resources/CloudwatchMerticFilter.yml):CloudwatchMerticFilter}
    SESUserEmail: ${file(./resources/SESUserEmail.yml):SESUserEmail}
    CloudWatchAlarm: ${file(./resources/CloudWatchAlarm.yml):CloudWatchAlarm}

custom:
  MetricFilter:
    name: Notes-errors-${self:provider.stage}
  GetMetricFilter:
    name: Notes-errors-get-${self:provider.stage}
  ReportingSNSSopic:
    name: reporting-sns-topic-${self:provider.stage}
  AlarmName:
    name: notes-${self:provider.stage}
  SESEmail:
    name: !Ref SESUserEmail
    value: !Ref SESUserEmail

  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: "UserPool::Id"
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: "UserPoolClient::Id"
    FacebookIdentityPoolId:
      Value: !Ref CognitoFacebookUserPoolIdentityProvider
      Export:
        Name: "FacebookIdentityPool::Id"
    GoogleIdentityPoolId:
      Value: !Ref CognitoGoogleUserPoolIdentityProvider
      Export:
        Name: "GoogleIdentityPool::Id"
# !Join ['', ['my-bucket-', !ToString ${AWS::AccountId}]]
