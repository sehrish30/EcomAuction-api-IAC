service: notes-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-2

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createNote:
    handler: src/handlers/createNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):PutItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: post
          path: notes
  updateNote:
    handler: src/handlers/updateNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):UpdateItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: put
          path: notes/{noteId}
  deleteNote:
    handler: src/handlers/deleteNote.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):DeleteItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: delete
          path: notes/{noteId}
  getAllNotes:
    handler: src/handlers/getAllNotes.handler
    iamRoleStatements:
      - ${file(./iam/NotesTableIAM.yml):ScanItemNotesTableIAM}
    environment:
      NOTES_TABLE: !Ref NotesTable # get TableName
    events:
      - http:
          method: get
          path: notes
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# custom:

resources:
  Resources:
    NotesTable: ${file(./resources/NotesTable.yml):NotesTable}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
