schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  # subscription response must be optional
  # response for typingIndicator mutation and subscription has to be same, names can be different
  # subscription resolver is optional, usually only used for authentication
  typingIndicator: TypingIndicator
    @aws_subscribe(mutations: ["typingIndicator"])
  newMessage: Message @aws_subscribe(mutations: ["sendMessage"])
}

type Mutation {
  createUserAccount(input: UserInput!): User! @aws_cognito_user_pools
  updateUserAccount(input: UpdateUserInput!): User! @aws_cognito_user_pools

  createGroup(input: GroupInput!): Group! @aws_cognito_user_pools
  addUserToGroup(userId: String!, groupId: String!): Boolean!
    @aws_cognito_user_pools
  sendMessage(input: MessageInput!): Message! @aws_cognito_user_pools

  typingIndicator(
    userId: String!
    groupId: String!
    typing: Boolean!
  ): TypingIndicator! @aws_cognito_user_pools
}

type TypingIndicator @aws_cognito_user_pools {
  userId: String!
  groupId: String!
  typing: Boolean!
}
type Query {
  getAllGroupsCreatedByUser(
    userId: String!
    limit: Int
    nextToken: String
  ): GroupResult! @aws_cognito_user_pools
  getAllMessagesPerGroup(
    groupId: String!
    limit: Int
    nextToken: String
  ): MessageResult! @aws_cognito_user_pools
  getGroupsUserBelongsTo(
    userId: String!
    limit: Int
    nextToken: String
  ): UserGroupResult! @aws_cognito_user_pools
}

type User @aws_cognito_user_pools {
  id: ID!
  username: String!
  email: String!
  profilePicUrl: String!
  updatedOn: AWSDateTime
  createdOn: AWSDateTime
}

input UserInput @aws_cognito_user_pools {
  username: String!
  email: String!
  profilePicUrl: String!
}

input UpdateUserInput @aws_cognito_user_pools {
  id: ID!
  username: String!
  profilePicUrl: String!
}

type Message @aws_cognito_user_pools {
  id: ID!
  userId: String!
  user: User # have to use a nested resolver to resolve the user field.
  groupId: String!
  messageText: String!
  createdOn: AWSTimestamp!
}

type MessageResult @aws_cognito_user_pools {
  items: [Message!]!
  nextToken: String
}
input MessageInput @aws_cognito_user_pools {
  userId: String!
  groupId: String!
  messageText: String!
}

type UserGroup @aws_cognito_user_pools {
  userId: String!
  group: Group! # there is a nested group object within the UserGroup object, and this field would need to be resolved.
  createdOn: AWSTimestamp!
} # we used getGroupResolver check in user-lambda.ts to resolve these in items:[UserGroup]
type Group @aws_cognito_user_pools {
  id: ID!
  userId: String!
  name: String!
  description: String!
  createdOn: AWSTimestamp!
}

input GroupInput {
  userId: String!
  name: String!
  description: String!
}
type GroupResult @aws_cognito_user_pools {
  items: [Group!]! @aws_cognito_user_pools
  nextToken: String
}
type UserGroupResult @aws_cognito_user_pools {
  items: [UserGroup!]! @aws_cognito_user_pools
  nextToken: String
}

# How do we get a group object for each item in the UserGroup list.
# $context variable map looks like in vtl.
# This map holds all of the contextual information for your resolver invocation and has the following structure
# {
#    "arguments" : { ... },
#    "source" : { ... },
#    "result" : { ... },
#    "identity" : { ... },
#    "request" : { ... },
#    "info": { ... }
# }
# The source map contains the resolution of the parent field.
# We'll get the groupId from this map and pass it into the get group request template.
# For every UserGroup item, we'll get the groupId from the source variable map and pass it as input to the get_group_request.vtl.
