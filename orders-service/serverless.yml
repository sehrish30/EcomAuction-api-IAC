service: orders-service

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iam:
    role:
      statements:
        - ${file(./iam/CloudFrontIAM.yml):CloudFrontIAM}
        - ${file(./iam/NotifyCourierIAM.yml):NotifyCourierIAM}

  environment:
    REGION: us-east-2 # bucket is in us-east-2
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    AUTHENTICATION_TABLE_NAME: ${self:custom.AuthenticationTable.name}

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-step-functions
  - serverless-dotenv-plugin

functions:
  orderReceiptPDF:
    handler: src/handlers/orderReceiptPDF.handler
  # url:
  #   cors: true # I am not adding this because I am already making it URL from this resource "OrderReceiptDownloadPdfUrl"
  checkInventory:
    handler: src/handlers/checkInventory.handler
    iamRoleStatements:
      - ${file(./iam/AuctionTableIAM.yml):AuctionsTableGetAuctionsIAM}
  calculateTotal:
    handler: src/handlers/calculateTotal.handler
  redeemPoints:
    handler: src/handlers/redeemPoints.handler
    iamRoleStatements:
      - ${file(./iam/AuthenticationTableIAM.yml):AuthenticationTableUpdateItemIAM}
      - ${file(./iam/AuthenticationTableIAM.yml):AuthenticationTableGetItemIAM}
  billCustomer:
    handler: src/handlers/billCustomer.handler
  restoreRedeemPoints:
    handler: src/handlers/restoreRedeemPoints.handler
    iamRoleStatements:
      - ${file(./iam/AuthenticationTableIAM.yml):AuthenticationTableUpdateItemIAM}
  sqsWorker:
    handler: src/handlers/sqsWorker.handler
    iamRoleStatements:
      - ${file(./iam/AuctionTableIAM.yml):AuctionsTableUpdateAuctionsIAM}
      - ${file(./iam/OrdersQueueIAM.yml):OrdersQueueIAM}
      - ${file(./iam/StateMachineIAM.yml):StateMachineIAM}
    # triggered by sqs
    events:
      - sqs:
          arn: !GetAtt OrdersQueue.Arn
          # lambda will only pick one message from the queue if batchSize 1
          batchSize: 1
  restoreQuantity:
    handler: src/handlers/restoreQuantity.handler
    iamRoleStatements:
      - ${file(./iam/AuctionTableIAM.yml):AuctionsTableUpdateAuctionsIAM}
  refundCustomer:
    handler: src/handlers/refundCustomer.handler
    iamRoleStatements:
      - ${file(./iam/AuthenticationTableIAM.yml):AuthenticationTableUpdateItemIAM}

resources:
  Resources:
    OrderReceiptDownloadPdfUrl: ${file(./resources/OrderReceiptDownloadPdfUrl.yml):OrderReceiptDownloadPdfUrl}
    PermissionForURLInvoke: ${file(./resources/OrderReceiptDownloadPdfUrl.yml):PermissionForURLInvoke}
    CloudFrontCachePolicy: ${file(./resources/CloudFront.yml):CloudFrontCachePolicy}
    CloudFrontDistribution: ${file(./resources/CloudFront.yml):CloudFrontDistribution}
    WebACL: ${file(./resources/CloudFront.yml):WebACL}
    OrdersQueue: ${file(./resources/OrdersQueue.yml):OrdersQueue}
    NotifyCourier: ${file(./resources/NotifyCourier.yml):NotifyCourier}

stepFunctions:
  stateMachines:
    storeCheckoutFlow: ${file(./resources/StoreCheckoutFlowStepFunction.yml):StoreCheckoutFlowStepFunction}

custom:
  AuctionsTable:
    # recheck all names properly from aws cloudformation as well
    # arn: ${cf:auction-service-${sls:stage}.AuctionsTableArn}
    arn: ${cf(us-east-2):auction-service-${sls:stage}.AuctionsTableArn}
    name: ${cf(us-east-2):auction-service-${sls:stage}.AuctionsTableName}
  AuthenticationTable:
    name: ${cf(us-east-2):authentication-service-${sls:stage}.AuthenticationTableName}
    arn: ${cf(us-east-2):authentication-service-${sls:stage}.AuthenticationTableArn}
  AuctionsBucket:
    name: auctions-bucket-sdsjj32kjds-${self:provider.stage}
  OrdersQueue:
    name: OrdersQueue-${sls:stage}
    arn: !GetAtt OrdersQueue.Arn
  courierAdminEmail: ${env:COURIER_ADMIN_EMAIL}
  StoreCheckoutFlowStateMachine:
    # !Ref StoreCheckoutFlowStateMachine comes from id = StoreCheckoutFlowStateMachine in step functions
    arn: !Ref StoreCheckoutFlowStateMachine
    name: ${self:stepFunctions.stateMachines.storeCheckoutFlow.name}
