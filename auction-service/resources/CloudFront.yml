# Cache Policy for Cloudfront API Gateway
CloudFrontCachePolicy:
  Type: AWS::CloudFront::CachePolicy
  Properties:
    CachePolicyConfig:
      # TTL settings work together with cache control settings that we send through http headers
      DefaultTTL: 300
      MaxTTL: 31536000
      MinTTL: 60
      # cacheky is the unique identifier of the object we cache in cloudfront
      Name: RESTAPICachePolicy
      # ParametersInCacheKeyAndForwardedToOrigin = changes in headers, cookies and query strings cloudfront considers when creating cache key for api route
      ParametersInCacheKeyAndForwardedToOrigin:
        CookiesConfig:
          CookieBehavior: none
        EnableAcceptEncodingBrotli: true
        EnableAcceptEncodingGzip: true
        HeadersConfig:
          HeaderBehavior: whitelist
          # now cloudfront cache key will consider Authorization header
          # and 2 users with different Authorization header will have seperate caches
          # so one user will not get cache data from another user from cloudfront
          Headers:
            - Authorization
        QueryStringsConfig:
          QueryStringBehavior: none

# rateBasedRule:
#   Type: AWS::WAFv2::Rule
#   Properties:
#     Name: RateBasedRule
#     Scope: CLOUDFRONT
#     Description: RateBasedRule for DDoS protection
#     Priority: 1
#     VisibilityConfig:
#       CloudWatchMetricsEnabled: true
#       MetricName: RateBasedRuleMetric
#       SampledRequestsEnabled: true
#     Statement:
#       RateBasedStatement:
#         AggregateKeyType: IP # Aggregate the request counts on the IP address from the web request origin.
#         # how many requests should i allow from a single IP address within 5 minutes else ip will be blocked
#         # should be between 100 and 20 million
#         Limit: 1000

# Waf:
# Advantages
# Owasp top 10 security rules e.g security Injection, XSS etc
# Create WEb ACL (Sccess Control Lists) and associate rules
# Provides automatically updating Managed Waf rules
# Provides rate based rules to block exessive traffic from IP addresses
# Provides rules to block IP address with low reputation generated by vpn etc(DDoS protection)
# Control bot traffic

# for one webACL recommended capacity is less than 1500
# what is capacity? resources or processing power that is required to run these rule sets
# our capacity becomes 1025
WebACL: # should be in region 1
  Type: AWS::WAFv2::WebACL
  Properties:
    Name: AuctionWebACL
    Scope: CLOUDFRONT # or REGIONAL
    Description: WebACL of auction service cloudfront
    VisibilityConfig:
      SampledRequestsEnabled: true
      CloudWatchMetricsEnabled: true
      MetricName: AuctionWebACLMetric
    DefaultAction:
      # The action to perform if none of the Rules contained in the WebACL match
      # means legit requests in the context of our application
      Allow: {}
    Rules:
      - Name: AuctionGeolocationRule # 2 capacity units
        Priority: 6
        Action:
          Block: {}
        Statement:
          GeoMatchStatement:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-geomatchstatement.html#cfn-wafv2-webacl-geomatchstatement-countrycodes
            CountryCodes:
              - US
              - CN
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      - Name: RateBasedRule # 2 capacity units
        Priority: 2
        Action:
          Block: {}
        Statement:
          RateBasedStatement:
            AggregateKeyType: IP # Aggregate the request counts on the IP address from the web request origin.
            # how many requests should i allow from a single IP address within 5 minutes else ip will be blocked
            # should be between 100 and 20 million
            Limit: 1000
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html
      - Name: IPReputationRule
        Priority: 1
        Action:
          Block: {}
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAmazonIpReputationList
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      - Name: AnonymousIPRule
        Priority: 3
        Action:
          Block: {}
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAmazonIpReputationList
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      # CoreRuleSet provides protection against OWASP and prevents wide range of vunerabilities
      - Name: CoreRuleSet
        Priority: 4
        Action:
          Block: {}
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: CoreRuleSetMetric
      - Name: KnownBadInputsRule
        Priority: 5
        Action:
          Block: {}
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesKnownBadInputsRuleSet
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: KnownBadInputsRuleMetric
  Type: AWS::WAFv2::WebACL
  Properties:
    Name: AuctionWebACL
    Scope: CLOUDFRONT # or REGIONAL
    Description: WebACL of auction service cloudfront
    VisibilityConfig:
      SampledRequestsEnabled: true
      CloudWatchMetricsEnabled: true
      MetricName: AuctionWebACLMetric
    DefaultAction:
      # The action to perform if none of the Rules contained in the WebACL match
      # means legit requests in the context of our application
      Allow: {}
    Rules:
      - Name: AuctionGeolocationRule # 2 capacity units
        Priority: 1
        Statement:
          GeoMatchStatement:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-geomatchstatement.html#cfn-wafv2-webacl-geomatchstatement-countrycodes
            CountryCodes:
              - US
              - CN
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      - Name: RateBasedRule # 2 capacity units
        Priority: 1
        Statement:
          RateBasedStatement:
            AggregateKeyType: IP # Aggregate the request counts on the IP address from the web request origin.
            # how many requests should i allow from a single IP address within 5 minutes else ip will be blocked
            # should be between 100 and 20 million
            Limit: 1000
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html
      - Name: IPReputationRule
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAmazonIpReputationList
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      - Name: AnonymousIPRule
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAnonymousIpList
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: AnonymousIPRuleMetric
      # CoreRuleSet provides protection against OWASP and prevents wide range of vunerabilities
      - Name: CoreRuleSet
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: CoreRuleSetMetric
      - Name: KnownBadInputsRule
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesKnownBadInputsRuleSet
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: KnownBadInputsRuleMetric

# Cloud Front Distrbition
CloudFrontDistribution:
  Type: AWS::CloudFront::Distribution
  Properties:
    DistributionConfig:
      PriceClass: PriceClass_All
      Enabled: true
      HttpVersion: http2 # HTTP/2, viewers must support TLSv1.2 or late
      # cloudfront protected by waf
      WebACLId: !GetAtt WebACL.Id
      Origins:
        # attributes we need for api gateway origin
        - Id: auctionAPIGateway
          # I got ApiGatewayRestApi from .serverless/cloudfromation-template-update-stack.json file checked api gateway resource name
          # APIGateway is configured by serverless framework
          DomainName: !Join
            - "."
            - - !Ref ApiGatewayRestApi # api id
              - "excecute-api"
              - ${aws:region} # aws:region region of this stack
              - "amazonaws.com"
          CustomOriginConfig:
            # protocol used by cloudfront to connect with the origin
            OriginProtocolPolicy: https-only
      DefaultCacheBehavior:
        # DefaultCacheBehavior is must
        # here this uses default path which is necessary
        # to which origin are we targeting this caching behavior
        # same if we defined in Origins - Id
        TargetOriginId: auctionAPIGateway
        # ViewerProtocolPolicy: how our client/browser access our cloudfront domain
        ViewerProtocolPolicy: https-only
        # Refer the cache policy in cloudfront distrrbution
        CachePolicyId: !Ref CloudFrontCachePolicy
      CacheBehaviors:
        # all the path "/dev/*" that matches to this behavior will be use this cache
        # this will macth closely to routes so it will get lower presedence value which gets higher priority
        # in production apps I have to be careful with which path should we actually cache!
        - PathPattern: /dev/*
          TargetOriginId: auctionAPIGateway
          ViewerProtocolPolicy: https-only
          CachePolicyId: !Ref CloudFrontCachePolicy
# usecase: add custom headers in cloudfront
# you are using public endpoint and we want to make sure that all
# requests are coming through the cloudfront I can add that header
# and verify that header exist for my public http endpoint
# so that way i can reject any traffic that donot include that header in the request
# here we are using api gatewya so we dont need to add custom headers

