service: auction-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

# Configuration validation
configValidationMode: error

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    # environment:
    #   variable2: value2
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableCreateAuctionIAM}
    # invoke lambda function using api gateway
    events:
      - http:
          path: /auction
          method: post
          # this is going to allow request origin allowed for preflight requests
          # allowed origins should be in lambda functions for that im using middy cors
          # https://www.serverless.com/blog/cors-api-gateway-survival-guide/
          cors: true
          authorizer: ${self:custom.authorizer}
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: get
          path: /auctions
          cors: true
          # arn of the lambda authorizer
          # our auth service is in the same account as this service
          # else we would assume a role
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableGetAuctionsIAM}
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: get
          path: /auction/${id}
          cors: true
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableGetAuctionIAM}
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          cors: true
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableUpdateAuctionIAM}
  processAuctions:
    handler: src/handlers/processAuctions.handler
    events:
      - schedule: rate(300 minutes)
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableProcessAuctionsIAM}
      # allow lambda functions to send messages to this queue
      - ${file(./iam/MailQueueIAM.yml):MailQueueIAM}

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          cors: true
          path: auction/{id}/picture
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableUpdateAuctionIAM}
      - ${file(./iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}
  orderReceipt:
    handler: src/handlers/orderReceipt.handler
    # will create a public url
    # can also configure cors here
    url: true

resources:
  Resources:
    AuctionsTable: ${file(./resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(./resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(./resources/AuctionsBucket.yml):AuctionsBucketPolicy}

custom:
  #psudeo parameters = #{AWS::Region}:#{AWS::AccountId}
  # to authorize in another lambda before hitting this route
  authorizer: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:authentication-service-${self:provider.stage}-auth
  bundle:
    linting: true
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  # also put it in environment variable because will be accessed by lambda
  MailQueue:
    # access cloudformation outputs from notification service
    arn: ${cf:notifications-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notifications-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-sdsjj32kjds-${self:provider.stage}
# custom variable self, refers to this serverless.yml file
# and then we can select object from upper scope of this file provider
# self:provider.stage

# intrinsic functions
# Ref when u pass logocal id of the resource it returns resource name
# !GetAtt to return Arn
