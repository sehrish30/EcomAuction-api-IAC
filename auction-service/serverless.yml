service: auction-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

# Configuration validation
configValidationMode: error

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function



# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    # environment:
    #   variable2: value2
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableCreateAuctionIAM}
    # invoke lambda function using api gateway
    events:
      - http:
          path: /auction
          method: post
          cors: true
          authorizer: ${self:custom.authorizer}
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: get
          path: /auctions
          # arn of the lambda authorizer
          # our auth service is in the same account as this service
          # else we would assume a role
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableGetAuctionsIAM}
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: get
          path: /auction/${id}
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableGetAuctionIAM}
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableUpdateAuctionIAM}
  processAuctions:
    handler: src/handlers/processAuctions.handler
    events:
      - schedule: rate(300 minutes)
    iamRoleStatements:
      - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableProcessAuctionsIAM}
      # allow lambda functions to send messages to this queue
      - ${file(./iam/MailQueueIAM.yml):MailQueueIAM}

  # - websocket: $connect
  # - s3: ${env:BUCKET}
  # - schedule: rate(10 minutes)
  # - sns: greeter-topic
  # - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  # - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  # - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  # - iot:
  #     sql: "SELECT * FROM 'some_topic'"
  # - cloudwatchEvent:
  #     event:
  #       source:
  #         - "aws.ec2"
  #       detail-type:
  #         - "EC2 Instance State-change Notification"
  #       detail:
  #         state:
  #           - pending
  # - cloudwatchLog: '/aws/lambda/hello'
  # - cognitoUserPool:
  #     pool: MyUserPool
  #     trigger: PreSignUp
  # - alb:
  #     listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #     priority: 1
  #     conditions:
  #       host: example.com
  #       path: /hello
# you can add CloudFormation resource templates here

resources:
  Resources:
    AuctionsTable: ${file(./resources/AuctionsTable.yml):AuctionsTable}

custom:
  #psudeo parameters = #{AWS::Region}:#{AWS::AccountId}
  # to authorize in another lambda before hitting this route
  authorizer: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:authentication-service-${self:provider.stage}-auth
  bundle:
    linting: true
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  # also put it in environment variable because will be accessed by lambda
  MailQueue:
    # access cloudformation outputs from notification service
    arn: ${cf:notifications-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notifications-service-${self:provider.stage}.MailQueueUrl}



# custom variable self, refers to this serverless.yml file
# and then we can select object from upper scope of this file provider
# self:provider.stage

# intrinsic functions
# Ref when u pass logocal id of the resource it returns resource name
# !GetAtt to return Arn
