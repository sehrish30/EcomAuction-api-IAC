service: books-service

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  deploymentBucket:
    name: ${env:BUCKET_NAME}

functions:
  hello:
    handler: handler.hello
# #    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    BooksTable: ${file(./resources/DynamoTable.yml):BooksTable}
    OrdersTable: ${file(./resources/DynamoTable.yml):OrdersTable}
    CognitoUserPool: ${file(./resources/Cognito.yml):CognitoUserPool}
    CognitoUserPoolClient: ${file(./resources/Cognito.yml):CognitoUserPoolClient}
    CongitoAdminGroup: ${file(./resources/Cognito.yml):CongitoAdminGroup}
    CongitoCustomGroup: ${file(./resources/Cognito.yml):CongitoCustomGroup}
    CongitoAdminIAMRole: ${file(./resources/Cognito.yml):CongitoAdminIAMRole}
    CongitoCustomersIAMRole: ${file(./resources/Cognito.yml):CongitoCustomersIAMRole}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-plugin-typescript
  # - serverless-appsync-plugin
# custom:
#   appSync:
